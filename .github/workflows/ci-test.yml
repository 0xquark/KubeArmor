name: ci-test

on:
  push:
    branches: [main]
    paths:
      - "KubeArmor/**"
      - "tests/**"
      - "protobuf/**"
      - ".github/workflows/ci-test.yml"
  pull_request:
    branches: [main]
    paths:
      - "KubeArmor/**"
      - "tests/**"
      - "protobuf/**"
      - ".github/workflows/ci-test.yml"

jobs:
  build:
    name: Auto-testing Framework / ${{ matrix.os }} / ${{ matrix.runtime }}
    runs-on: ${{ matrix.os }}
    env:
      RUNTIME: ${{ matrix.runtime }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, ubuntu-18.04]
        runtime: ["docker", "containerd", "crio"]
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      - uses: actions/setup-go@v3
        with:
          go-version: v1.18

      - name: Install the latest LLVM toolchain
        run: |
          . /etc/os-release

          sudo apt-get -y install build-essential libelf-dev pkg-config
          wget https://apt.llvm.org/llvm.sh -O /tmp/llvm.sh

          if [ "$VERSION_CODENAME" == "focal" ] || [ "$VERSION_CODENAME" == "bionic" ]; then
            sudo bash /tmp/llvm.sh 12
            for tool in "clang" "llc" "llvm-strip"; do
              sudo rm -f /usr/bin/$tool
              sudo ln -s /usr/bin/$tool-12 /usr/bin/$tool
            done
          else # VERSION_CODENAME == jammy
            sudo bash /tmp/llvm.sh 14
            for tool in "clang" "llc" "llvm-strip"; do
              sudo rm -f /usr/bin/$tool
              sudo ln -s /usr/bin/$tool-14 /usr/bin/$tool
            done
          fi

      - name: Compile libbpf
        run: |
          cd KubeArmor/BPF
          make -C libbpf/src

      - name: Setup a Kubernetes environment
        run: |
          echo "RUNTIME="$RUNTIME
          if [ "$RUNTIME" == "crio" ]; then
            ./contribution/self-managed-k8s/crio/install_crio.sh
          fi
          ./contribution/k3s/install_k3s.sh

      - name: Install cmctl
        run: |
          OS=$(go env GOOS); ARCH=$(go env GOARCH); curl -sSL -o cmctl.tar.gz https://github.com/cert-manager/cert-manager/releases/download/v1.7.2/cmctl-$OS-$ARCH.tar.gz
          tar xzf cmctl.tar.gz
          sudo mv cmctl /usr/local/bin

      - name: Install an annotation controller
        run: |
          kubectl apply -f deployments/annotations/cert-manager.yaml
          kubectl wait pods --for=condition=ready -n cert-manager -l app.kubernetes.io/instance=cert-manager
          cmctl check api --wait 300s
          kubectl apply -f deployments/annotations/kubearmor-annotation-manager.yaml
          kubectl wait pods --for=condition=ready -n kube-system -l kubearmor-app=kubearmor-annotation-manager

      - name: Run kubectl proxy
        run: kubectl proxy &

      - name: Run and Test KubeArmor
        run: ./tests/test-scenarios-github.sh
        timeout-minutes: 15

      - name: Archive log artifacts
        if: ${{ failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: kubearmor.logs
          path: |
            /tmp/kubearmor.test
            /tmp/kubearmor.log
            /tmp/kubearmor.msg

      - name: Check the testing results
        if: ${{ always() }}
        run: cat /tmp/kubearmor.test

      - name: Measure code coverage
        if: ${{ always() }}
        run: |
          go install github.com/modocache/gover@latest
          gover
          go tool cover -func=gover.coverprofile
        working-directory: KubeArmor
        env:
          GOPATH: /home/runner/go

      - uses: codecov/codecov-action@v2
        if: ${{ always() }}
        with:
          files: ./KubeArmor/gover.coverprofile
