name: ci-test-runtime

on:
  push:
    branches: [main]
    paths:
      - "KubeArmor/**"
      - "tests/**"
      - "protobuf/**"
      - ".github/workflows/ci-test-runtime.yml"
  pull_request:
    branches: [main]
    paths:
      - "KubeArmor/**"
      - "tests/**"
      - "protobuf/**"
      - ".github/workflows/ci-test-runtime.yml"

jobs:
  build:
    name: Test KubeArmor in Runtime
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, ubuntu-18.04]
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      - uses: actions/setup-go@v3
        with:
          go-version: v1.18

      - name: Install the latest LLVM toolchain
        run: |
          . /etc/os-release

          sudo apt-get -y install build-essential libelf-dev pkg-config
          wget https://apt.llvm.org/llvm.sh -O /tmp/llvm.sh

          if [ "$VERSION_CODENAME" == "focal" ] || [ "$VERSION_CODENAME" == "bionic" ]; then
            sudo bash /tmp/llvm.sh 12
            for tool in "clang" "llc" "llvm-strip"; do
              sudo rm -f /usr/bin/$tool
              sudo ln -s /usr/bin/$tool-12 /usr/bin/$tool
            done
          else # VERSION_CODENAME == jammy
            sudo bash /tmp/llvm.sh 14
            for tool in "clang" "llc" "llvm-strip"; do
              sudo rm -f /usr/bin/$tool
              sudo ln -s /usr/bin/$tool-14 /usr/bin/$tool
            done
          fi

      - name: Compile libbpf
        run: |
          cd KubeArmor/BPF
          make -C libbpf/src

      - name: Setup a Kubernetes environment
        id: vars
        run: |
          echo ::set-output name=tag::latest
          RUNTIME=docker ./contribution/k3s/install_k3s.sh

      - name: Generate KubeArmor artifacts
        run: |
          GITHUB_SHA=$GITHUB_SHA ./KubeArmor/build/build_kubearmor.sh ${{ steps.vars.outputs.tag }}

      - name: Run KubeArmor
        run: |
          sed -i 's/kubearmor\/kubearmor:latest/kubearmor\/kubearmor:${{ steps.vars.outputs.tag }}/g' ./KubeArmor/build/kubearmor-test-docker.yaml
          sed -i 's/kubearmor\/kubearmor-init:latest/kubearmor\/kubearmor-init:${{ steps.vars.outputs.tag }}/g' ./KubeArmor/build/kubearmor-test-docker.yaml
          kubectl apply -f ./KubeArmor/build/kubearmor-test-docker.yaml
          kubectl wait --for=condition=ready --timeout=5m -n kube-system pod -l kubearmor-app=kubearmor
          kubectl get pods -A

      - name: Test KubeArmor
        run: |
          ./tests/test-scenarios-github.sh ${{ steps.vars.outputs.tag }}

      - name: Capture KubeArmor logs
        if: ${{ failure() }}
        run: |
          kubectl -n kube-system describe pod $(kubectl get pods -n kube-system -l kubearmor-app=kubearmor --no-headers -o custom-columns=:metadata.name)
          kubectl exec -n kube-system daemonset/kubearmor -- cat /tmp/kubearmor.log > /tmp/kubearmor.log

      - name: Archive log artifacts
        if: ${{ failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: kubearmor.logs
          path: |
            /tmp/kubearmor.test
            /tmp/kubearmor.log
            /tmp/kubearmor.msg

      - name: Check the testing results
        if: ${{ always() }}
        run: cat /tmp/kubearmor.test
